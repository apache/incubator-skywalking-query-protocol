# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Thread monitor task create need data
input ThreadMonitorTaskCreationRequest {
    # need to monitor service id
    serviceId: ID!
    # endpoint name to monitored under the special service.
    endpointName: String!
    # if null means the task starts ASAP, otherwise the task begin after the startTime(based on agent side time)
    startTime: Long
    # thread monitor duration of this task
    duration: Int!
    # thread monitor duration unit
    durationUnit: Step!
    # when the segment starts to execute, how long must it take before the monitor can be enbaled
    minDurationThreshold: Int!
    # when start monitor, time interval for each thread dumping the stack
    dumpPeriod: Int!
}

# Thread monitor task create result
type ThreadMonitorTaskCreationResult {
    # if null or empty means the task create success, otherwise get create error reason
    errorReason: String

    # get data id when create success
    id: String
}

type ThreadMonitorTask {
    id: String!
    # monitor service
    serviceId: ID!
    serviceName: String!
    # endpoint name to monitored under the special service.
    endpointName: String!
    # task start time (timestamp)
    startTime: Long!
    # thread monitor duration of this task (second)
    duration: Int!
    # when the segment starts to execute, how long must it take before the monitor can be enbaled
    minDurationThreshold: Int!
    # when start monitor, time interval for each thread dumping the stack
    dumpPeriod: Int!
}

extend type Mutation {
    # crate new thread monitor task
    createThreadMonitorTask(creationRequest: ThreadMonitorTaskCreationRequest): ThreadMonitorTaskCreationResult!
}

extend type Query {
    # query task list
    getThreadMonitorTaskList(serviceId: ID, endpointName: String, duration: Duration!): [ThreadMonitorTask!]!
}
